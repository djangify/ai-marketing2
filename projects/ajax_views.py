# projects/ajax_views.py
from django.http import JsonResponse
from django.views.decorators.http import require_POST
from django.contrib.auth.decorators import login_required
from django.shortcuts import get_object_or_404
import json
from .models import Project, Asset, Prompt, GeneratedContent

@login_required
@require_POST
def prompt_update(request):
    try:
        data = json.loads(request.body)
        prompt_id = data.get('prompt_id')
        name = data.get('name')
        prompt_text = data.get('prompt')
        
        prompt = get_object_or_404(Prompt, id=prompt_id)
        
        # Check if the prompt belongs to a project owned by the user
        if prompt.project.user != request.user:
            return JsonResponse({'status': 'error', 'message': 'Permission denied'}, status=403)
        
        prompt.name = name
        prompt.prompt = prompt_text
        prompt.save()
        
        return JsonResponse({
            'status': 'success',
            'prompt': {
                'id': prompt.id,
                'name': prompt.name,
                'prompt': prompt.prompt,
            }
        })
    except Exception as e:
        return JsonResponse({'status': 'error', 'message': str(e)}, status=400)

@login_required
@require_POST
def prompt_create(request, project_id):
    try:
        project = get_object_or_404(Project, id=project_id, user=request.user)
        
        # Get the highest order value
        highest_order = Prompt.objects.filter(project=project).order_by('-order').values_list('order', flat=True).first() or -1
        next_order = highest_order + 1
        
        prompt = Prompt.objects.create(
            project=project,
            name="New Prompt",
            prompt="",
            order=next_order
        )
        
        return JsonResponse({
            'status': 'success',
            'prompt': {
                'id': prompt.id,
                'name': prompt.name,
                'prompt': prompt.prompt,
                'order': prompt.order,
            }
        })
    except Exception as e:
        return JsonResponse({'status': 'error', 'message': str(e)}, status=400)

@login_required
@require_POST
def prompt_delete(request, project_id, prompt_id):
    try:
        project = get_object_or_404(Project, id=project_id, user=request.user)
        prompt = get_object_or_404(Prompt, id=prompt_id, project=project)
        
        prompt.delete()
        
        # Re-order remaining prompts
        remaining_prompts = Prompt.objects.filter(project=project).order_by('order')
        for i, p in enumerate(remaining_prompts):
            p.order = i
            p.save()
        
        return JsonResponse({'status': 'success'})
    except Exception as e:
        return JsonResponse({'status': 'error', 'message': str(e)}, status=400)

@login_required
@require_POST
def generate_content(request, project_id):
    try:
        project = get_object_or_404(Project, id=project_id, user=request.user)
        
        # Check if project has assets and prompts
        if not project.assets.exists():
            return JsonResponse({'status': 'error', 'message': 'Project has no assets'}, status=400)
        
        if not project.prompts.exists():
            return JsonResponse({'status': 'error', 'message': 'Project has no prompts'}, status=400)
        
        # Clear existing generated content
        GeneratedContent.objects.filter(project=project).delete()
        
        # Placeholder for actual generation
        # In a real implementation, this would call the Node.js service
        prompts = project.prompts.all().order_by('order')
        
        generated_contents = []
        for i, prompt in enumerate(prompts):
            content = GeneratedContent.objects.create(
                project=project,
                name=prompt.name,
                result=f"Generated content for prompt: {prompt.name}\n\nThis is placeholder content. In a real implementation, this would be generated by the Node.js service.",
                order=i
            )
            generated_contents.append({
                'id': str(content.id),
                'name': content.name,
                'result': content.result,
                'order': content.order,
            })
        
        return JsonResponse({
            'status': 'success',
            'generated_contents': generated_contents
        })
    except Exception as e:
        return JsonResponse({'status': 'error', 'message': str(e)}, status=400)

@login_required
@require_POST
def update_generated_content(request, content_id):
    try:
        data = json.loads(request.body)
        result = data.get('result')
        
        content = get_object_or_404(GeneratedContent, id=content_id)
        
        # Check if the content belongs to a project owned by the user
        if content.project.user != request.user:
            return JsonResponse({'status': 'error', 'message': 'Permission denied'}, status=403)
        
        content.result = result
        content.save()
        
        return JsonResponse({
            'status': 'success',
            'content': {
                'id': str(content.id),
                'name': content.name,
                'result': content.result,
                'order': content.order,
            }
        })
    except Exception as e:
        return JsonResponse({'status': 'error', 'message': str(e)}, status=400)
    